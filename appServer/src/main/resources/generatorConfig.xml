<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<!-- 参考文档：http://generator.sturgeon.mopaas.com/index.html -->
	<!-- 参考文档：http://git.oschina.net/free/Mybatis_Utils/blob/master/MybatisGeneator/MybatisGeneator.md -->
	<!-- mybatis-generator-maven-plugin会默认读取src/main/resources的generatorConfig.xml文件 -->
	<!-- mvn mybatis-generator:generate -->

	<!-- 使用的外部属性文件 -->
	<properties resource="generatorConfig.properties" />

	<!-- JDBC 驱动文件位置 -->
	<!-- <classPathEntry location="mysql-connector-java-5.1.34.jar" /> -->
	<context id="MysqlContext" targetRuntime="MyBatis3Simple"
		defaultModelType="flat">
		<!--targetRuntime 默认 MyBatis3 可以用：MyBatis3Simple -->

		<!-- 分隔符，Mysql使用单引号 -->
		<property name="beginningDelimiter" value="`" />
		<property name="endingDelimiter" value="`" />
		<!-- 指定文件编码 -->
		<property name="javaFileEncoding" value="UTF-8" />

		<!-- 抑制警告 -->
		<!-- <property name="suppressTypeWarnings" value="true" /> -->

		<!-- generate entity时，生成hashcode和equals方法 -->
		<!-- <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/> -->
		<!-- generate entity时，生成serialVersionUID -->
		<plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
		<!-- genenat entity时,生成toString -->
		<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />

		<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
		<commentGenerator type="com.xrkj.utils.mbg.MyCommentGenerator"><!-- 配置成注释的类，生成中文注释 -->
			<property name="suppressAllComments" value="true" /><!-- 生成注释 -->
			<property name="suppressDate" value="true" /><!-- 生成的注释包含时间戳 -->
		</commentGenerator>

		<!-- 数据库配置 -->
		<jdbcConnection driverClass="${jdbc.driverClassName}"
			connectionURL="${jdbc.url}" userId="${jdbc.username}" password="${jdbc.password}">
		</jdbcConnection>

		<!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 -->
		<!-- 使用 MAVEN 时，生成在： /${project}/target/generated-sources/mybatis-generator 
			目录下 -->
		<javaModelGenerator targetPackage="com.xrkj.app.${moduleName}.model"
			targetProject="src/main/java">
			<!-- <property name="trimStrings" value="true" /> -->
			<property name="enableSubPackages" value="true" />
			<!-- 设置所有实体类的基类。如果设置，需要使用类的全限定名称。并且如果MBG能够加载rootClass，那么MBG不会覆盖和父类中完全匹配的属性。 -->
			<!-- 匹配规则： 属性名完全相同 属性类型相同 属性有getter方法 属性有setter方法 -->
			<property name="rootClass" value="com.xrkj.app.base.model.BaseEntity" />
		</javaModelGenerator>

		<!-- 生成的映射文件包名和位置 -->
		<sqlMapGenerator targetPackage="mappings.${moduleName}"
			targetProject="src/main/resources">
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>

		<!-- 生成DAO的包名和位置 -->
		<javaClientGenerator type="XMLMAPPER"
			targetPackage="com.xrkj.app.${moduleName}.dao" targetProject="src/main/java">
			<property name="enableSubPackages" value="true" />
			<!-- 此属性用于指定一个所有生成的接口都继承的父接口 -->
			<property name="rootInterface" value="com.xrkj.app.base.dao.IDao" />
		</javaClientGenerator>

		<!-- 要生成的表 % 表示全部的表 -->
		<!-- table 元素可以包含多个 -->
		<table tableName="${tableName}">
			<generatedKey column="id" sqlStatement="JDBC" />
		</table>

		<!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名 -->
		<!-- <table tableName="user_info_t" domainObjectName="User" enableCountByExample="false" 
			enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" 
			selectByExampleQueryId="false"></table> -->

	</context>
</generatorConfiguration>