<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-4.1.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
            http://www.springframework.org/schema/cache
            http://www.springframework.org/schema/cache/spring-cache-4.1.xsd">

	<!-- 缓存配置 -->
	<!--基于Spring AOP 的动态的 proxy 技术技术，不支持方法的内部调用或者非 public 方法的缓存设置 -->
	<!-- 指定自定义的key生成器 -->
	<bean id="simpleStringKeyGenerator"
		class="com.xrkj.app.cache.keygenerator.SimpleStringKeyGenerator" />

	<context:component-scan base-package="com.xrkj.app.cache" />

	<cache:annotation-driven cache-manager="cacheManager"
		key-generator="simpleStringKeyGenerator" error-handler="myCacheErrorHandler" />


	<!-- Spring对EhCache的缓存工厂支持 -->
	<bean id="ehCacheManagerFactory"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
	</bean>

	<!-- Spring对EhCache的缓存管理 -->
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManagerFactory"></property>
		<property name="transactionAware" value="true" />	<!-- 是否事务环绕的，如果true，则如果事务回滚，缓存也回滚，默认false -->
	</bean>


	<!-- redis配置 -->
	<!-- jedis pool配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxTotal}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<!-- Jedis ConnectionFactory -->
	<bean id='jedisConnectionFactory'
		class='org.springframework.data.redis.connection.jedis.JedisConnectionFactory'>
		<property name="usePool" value="true"></property>
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.pass}" />
		<property name="timeout" value="${redis.timeout}" />
		<property name="database" value="${redis.default.db}"></property>
		<constructor-arg index="0" ref="jedisPoolConfig" />
	</bean>

	<!--JSON格式的序列化： com.xrkj.app.cache.redis.JsonRedisSerializer -->
	<!--String格式的序列化： com.xrkj.app.cache.redis.StringRedisSerializer -->
	<!-- com.xrkj.app.cache.redis.CompositeSerializer -->
	<!-- org.springframework.data.redis.serializer.StringRedisSerializer -->
	<bean id='redisTemplate' class='org.springframework.data.redis.core.RedisTemplate'>
		<property name="connectionFactory" ref="jedisConnectionFactory"></property>
		<property name="keySerializer">
			<bean class="com.xrkj.app.cache.redis.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="com.xrkj.app.cache.redis.StringRedisSerializer" />
		</property>
	</bean>

	<!-- redisCacheManager -->
	<bean id='cacheManager' class='org.springframework.data.redis.cache.RedisCacheManager'
		c:template-ref='redisTemplate'>
		<!-- <property name="defaultExpiration" value="1000" /> -->
		<property name="usePrefix" value="true" />
		<property name="transactionAware" value="true" />
		<property name="expires">
			<map>
				<entry key="sesCache" value="86400" />
				<entry key="testCache" value="5000" />
				<entry key="captcha" value="180" /><!-- 验证码 -->
			</map>
		</property>
	</bean>


	<!-- dummy cacheManager -->
	<bean id="cacheManager111" class="org.springframework.cache.support.CompositeCacheManager">
		<property name="cacheManagers">
			<list>
				<!-- <ref bean="ehCacheManager" /> -->
				<!-- <ref bean="redisCacheManager" /> -->
			</list>
		</property>
		<property name="fallbackToNoOpCache" value="false" />
		<!-- 找不到缓存就不做任何操作 -->
	</bean>


	<!-- spring监听器 -->
	<bean id="contextApplicationListener"
		class="com.xrkj.app.applicationlistener.ContextApplicationListener" />

	<bean id="servletRequestHandledListener"
		class="com.xrkj.app.applicationlistener.ServletRequestHandledListener" />

	<!-- 过滤器 为了能使用spring管理 -->
	<bean id="stopWatchFilter" class="com.xrkj.app.webapp.filter.StopWatchFilter" />
	<!-- 过滤器 -->
	<bean id="authenticationFilter" class="com.xrkj.app.webapp.filter.AuthenticationFilter"
		p:enable="true" />

	<!-- 验证码 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">no</prop>
						<!-- <prop key="kaptcha.border.color">105,179,90</prop> -->
						<!-- <prop key="kaptcha.textproducer.font.color">blue</prop> -->
						<prop key="kaptcha.image.width">150</prop>
						<prop key="kaptcha.image.height">50</prop>
						<prop key="kaptcha.textproducer.font.size">40</prop>
						<prop key="kaptcha.textproducer.char.space">5</prop>
						<prop key="kaptcha.session.key">code</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<!-- <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop> -->
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<!-- 邮件 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="protocol" value="${mail.transport.protocol}" />
		<property name="host" value="${mail.host}" />
		<property name="port" value="${mail.port}" />
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
	</bean>

	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
		<property name="queueCapacity" value="1000" />
	</bean>

	<!-- velocity模板引擎 -->
	<bean id="velocityEngine"
		class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="resourceLoaderPath" value="classpath:velocity/" />
		<!-- /WEB-INF/velocity/ -->
	</bean>

</beans>
	